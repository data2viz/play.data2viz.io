!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=8)}([function(e,t,n){(function(e,o){var i;
/*!
 * Platform.js <https://mths.be/platform>
 * Copyright 2014-2018 Benjamin Tan <https://bnjmnt4n.now.sh/>
 * Copyright 2011-2013 John-David Dalton <http://allyoucanleet.com/>
 * Available under MIT license <https://mths.be/mit>
 */(function(){"use strict";var r={function:!0,object:!0},a=r[typeof window]&&window||this,s=r[typeof t]&&t,l=r[typeof e]&&e&&!e.nodeType&&e,c=s&&l&&"object"==typeof o&&o;!c||c.global!==c&&c.window!==c&&c.self!==c||(a=c);var u=Math.pow(2,53)-1,d=/\bOpera/,b=Object.prototype,p=b.hasOwnProperty,f=b.toString;function h(e){return(e=String(e)).charAt(0).toUpperCase()+e.slice(1)}function m(e){return e=O(e),/^(?:webOS|i(?:OS|P))/.test(e)?e:h(e)}function S(e,t){for(var n in e)p.call(e,n)&&t(e[n],n,e)}function g(e){return null==e?h(e):f.call(e).slice(8,-1)}function x(e){return String(e).replace(/([ -])(?!$)/g,"$1?")}function E(e,t){var n=null;return function(e,t){var n=-1,o=e?e.length:0;if("number"==typeof o&&o>-1&&o<=u)for(;++n<o;)t(e[n],n,e);else S(e,t)}(e,function(o,i){n=t(n,o,i,e)}),n}function O(e){return String(e).replace(/^ +| +$/g,"")}var y=function e(t){var n=a,o=t&&"object"==typeof t&&"String"!=g(t);o&&(n=t,t=null);var i=n.navigator||{},r=i.userAgent||"";t||(t=r);var s,l,c=o?!!i.likeChrome:/\bChrome\b/.test(t)&&!/internal|\n/i.test(f.toString()),u=o?"Object":"ScriptBridgingProxyObject",b=o?"Object":"Environment",p=o&&n.java?"JavaPackage":g(n.java),h=o?"Object":"RuntimeObject",y=/\bJava/.test(p)&&n.java,_=y&&g(n.environment)==b,w=y?"a":"α",v=y?"b":"β",M=n.document||{},C=n.operamini||n.opera,A=d.test(A=o&&C?C["[[Class]]"]:g(C))?A:C=null,P=t,T=[],I=null,R=t==r,k=R&&C&&"function"==typeof C.version&&C.version(),N=function(e){return E(e,function(e,n){return e||RegExp("\\b"+(n.pattern||x(n))+"\\b","i").exec(t)&&(n.label||n)})}([{label:"EdgeHTML",pattern:"Edge"},"Trident",{label:"WebKit",pattern:"AppleWebKit"},"iCab","Presto","NetFront","Tasman","KHTML","Gecko"]),B=function(e){return E(e,function(e,n){return e||RegExp("\\b"+(n.pattern||x(n))+"\\b","i").exec(t)&&(n.label||n)})}(["Adobe AIR","Arora","Avant Browser","Breach","Camino","Electron","Epiphany","Fennec","Flock","Galeon","GreenBrowser","iCab","Iceweasel","K-Meleon","Konqueror","Lunascape","Maxthon",{label:"Microsoft Edge",pattern:"Edge"},"Midori","Nook Browser","PaleMoon","PhantomJS","Raven","Rekonq","RockMelt",{label:"Samsung Internet",pattern:"SamsungBrowser"},"SeaMonkey",{label:"Silk",pattern:"(?:Cloud9|Silk-Accelerated)"},"Sleipnir","SlimBrowser",{label:"SRWare Iron",pattern:"Iron"},"Sunrise","Swiftfox","Waterfox","WebPositive","Opera Mini",{label:"Opera Mini",pattern:"OPiOS"},"Opera",{label:"Opera",pattern:"OPR"},"Chrome",{label:"Chrome Mobile",pattern:"(?:CriOS|CrMo)"},{label:"Firefox",pattern:"(?:Firefox|Minefield)"},{label:"Firefox for iOS",pattern:"FxiOS"},{label:"IE",pattern:"IEMobile"},{label:"IE",pattern:"MSIE"},"Safari"]),F=G([{label:"BlackBerry",pattern:"BB10"},"BlackBerry",{label:"Galaxy S",pattern:"GT-I9000"},{label:"Galaxy S2",pattern:"GT-I9100"},{label:"Galaxy S3",pattern:"GT-I9300"},{label:"Galaxy S4",pattern:"GT-I9500"},{label:"Galaxy S5",pattern:"SM-G900"},{label:"Galaxy S6",pattern:"SM-G920"},{label:"Galaxy S6 Edge",pattern:"SM-G925"},{label:"Galaxy S7",pattern:"SM-G930"},{label:"Galaxy S7 Edge",pattern:"SM-G935"},"Google TV","Lumia","iPad","iPod","iPhone","Kindle",{label:"Kindle Fire",pattern:"(?:Cloud9|Silk-Accelerated)"},"Nexus","Nook","PlayBook","PlayStation Vita","PlayStation","TouchPad","Transformer",{label:"Wii U",pattern:"WiiU"},"Wii","Xbox One",{label:"Xbox 360",pattern:"Xbox"},"Xoom"]),W=function(e){return E(e,function(e,n,o){return e||(n[F]||n[/^[a-z]+(?: +[a-z]+\b)*/i.exec(F)]||RegExp("\\b"+x(o)+"(?:\\b|\\w*\\d)","i").exec(t))&&o})}({Apple:{iPad:1,iPhone:1,iPod:1},Archos:{},Amazon:{Kindle:1,"Kindle Fire":1},Asus:{Transformer:1},"Barnes & Noble":{Nook:1},BlackBerry:{PlayBook:1},Google:{"Google TV":1,Nexus:1},HP:{TouchPad:1},HTC:{},LG:{},Microsoft:{Xbox:1,"Xbox One":1},Motorola:{Xoom:1},Nintendo:{"Wii U":1,Wii:1},Nokia:{Lumia:1},Samsung:{"Galaxy S":1,"Galaxy S2":1,"Galaxy S3":1,"Galaxy S4":1},Sony:{PlayStation:1,"PlayStation Vita":1}}),L=function(e){return E(e,function(e,n){var o=n.pattern||x(n);return!e&&(e=RegExp("\\b"+o+"(?:/[\\d.]+|[ \\w.]*)","i").exec(t))&&(e=function(e,t,n){var o={"10.0":"10",6.4:"10 Technical Preview",6.3:"8.1",6.2:"8",6.1:"Server 2008 R2 / 7","6.0":"Server 2008 / Vista",5.2:"Server 2003 / XP 64-bit",5.1:"XP",5.01:"2000 SP1","5.0":"2000","4.0":"NT","4.90":"ME"};return t&&n&&/^Win/i.test(e)&&!/^Windows Phone /i.test(e)&&(o=o[/[\d.]+$/.exec(e)])&&(e="Windows "+o),e=String(e),t&&n&&(e=e.replace(RegExp(t,"i"),n)),e=m(e.replace(/ ce$/i," CE").replace(/\bhpw/i,"web").replace(/\bMacintosh\b/,"Mac OS").replace(/_PowerPC\b/i," OS").replace(/\b(OS X) [^ \d]+/i,"$1").replace(/\bMac (OS X)\b/,"$1").replace(/\/(\d)/," $1").replace(/_/g,".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i,"").replace(/\bx86\.64\b/gi,"x86_64").replace(/\b(Windows Phone) OS\b/,"$1").replace(/\b(Chrome OS \w+) [\d.]+\b/,"$1").split(" on ")[0])}(e,o,n.label||n)),e})}(["Windows Phone","Android","CentOS",{label:"Chrome OS",pattern:"CrOS"},"Debian","Fedora","FreeBSD","Gentoo","Haiku","Kubuntu","Linux Mint","OpenBSD","Red Hat","SuSE","Ubuntu","Xubuntu","Cygwin","Symbian OS","hpwOS","webOS ","webOS","Tablet OS","Tizen","Linux","Mac OS X","Macintosh","Mac","Windows 98;","Windows "]);function G(e){return E(e,function(e,n){var o=n.pattern||x(n);return!e&&(e=RegExp("\\b"+o+" *\\d+[.\\w_]*","i").exec(t)||RegExp("\\b"+o+" *\\w+-[\\w]*","i").exec(t)||RegExp("\\b"+o+"(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)","i").exec(t))&&((e=String(n.label&&!RegExp(o,"i").test(n.label)?n.label:e).split("/"))[1]&&!/[\d.]+/.test(e[0])&&(e[0]+=" "+e[1]),n=n.label||n,e=m(e[0].replace(RegExp(o,"i"),n).replace(RegExp("; *(?:"+n+"[_-])?","i")," ").replace(RegExp("("+n+")[-_.]?(\\w)","i"),"$1 $2"))),e})}if(N&&(N=[N]),W&&!F&&(F=G([W])),(s=/\bGoogle TV\b/.exec(F))&&(F=s[0]),/\bSimulator\b/i.test(t)&&(F=(F?F+" ":"")+"Simulator"),"Opera Mini"==B&&/\bOPiOS\b/.test(t)&&T.push("running in Turbo/Uncompressed mode"),"IE"==B&&/\blike iPhone OS\b/.test(t)?(W=(s=e(t.replace(/like iPhone OS/,""))).manufacturer,F=s.product):/^iP/.test(F)?(B||(B="Safari"),L="iOS"+((s=/ OS ([\d_]+)/i.exec(t))?" "+s[1].replace(/_/g,"."):"")):"Konqueror"!=B||/buntu/i.test(L)?W&&"Google"!=W&&(/Chrome/.test(B)&&!/\bMobile Safari\b/i.test(t)||/\bVita\b/.test(F))||/\bAndroid\b/.test(L)&&/^Chrome/.test(B)&&/\bVersion\//i.test(t)?(B="Android Browser",L=/\bAndroid\b/.test(L)?L:"Android"):"Silk"==B?(/\bMobi/i.test(t)||(L="Android",T.unshift("desktop mode")),/Accelerated *= *true/i.test(t)&&T.unshift("accelerated")):"PaleMoon"==B&&(s=/\bFirefox\/([\d.]+)\b/.exec(t))?T.push("identifying as Firefox "+s[1]):"Firefox"==B&&(s=/\b(Mobile|Tablet|TV)\b/i.exec(t))?(L||(L="Firefox OS"),F||(F=s[1])):!B||(s=!/\bMinefield\b/i.test(t)&&/\b(?:Firefox|Safari)\b/.exec(B))?(B&&!F&&/[\/,]|^[^(]+?\)/.test(t.slice(t.indexOf(s+"/")+8))&&(B=null),(s=F||W||L)&&(F||W||/\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(L))&&(B=/[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(L)?L:s)+" Browser")):"Electron"==B&&(s=(/\bChrome\/([\d.]+)\b/.exec(t)||0)[1])&&T.push("Chromium "+s):L="Kubuntu",k||(k=function(e){return E(e,function(e,n){return e||(RegExp(n+"(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)","i").exec(t)||0)[1]||null})}(["(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$))","Version",x(B),"(?:Firefox|Minefield|NetFront)"])),(s=("iCab"==N&&parseFloat(k)>3?"WebKit":/\bOpera\b/.test(B)&&(/\bOPR\b/.test(t)?"Blink":"Presto"))||/\b(?:Midori|Nook|Safari)\b/i.test(t)&&!/^(?:Trident|EdgeHTML)$/.test(N)&&"WebKit"||!N&&/\bMSIE\b/i.test(t)&&("Mac OS"==L?"Tasman":"Trident")||"WebKit"==N&&/\bPlayStation\b(?! Vita\b)/i.test(B)&&"NetFront")&&(N=[s]),"IE"==B&&(s=(/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(t)||0)[1])?(B+=" Mobile",L="Windows Phone "+(/\+$/.test(s)?s:s+".x"),T.unshift("desktop mode")):/\bWPDesktop\b/i.test(t)?(B="IE Mobile",L="Windows Phone 8.x",T.unshift("desktop mode"),k||(k=(/\brv:([\d.]+)/.exec(t)||0)[1])):"IE"!=B&&"Trident"==N&&(s=/\brv:([\d.]+)/.exec(t))&&(B&&T.push("identifying as "+B+(k?" "+k:"")),B="IE",k=s[1]),R){if(function(e,t){var n=null!=e?typeof e[t]:"number";return!(/^(?:boolean|number|string|undefined)$/.test(n)||"object"==n&&!e[t])}(n,"global"))if(y&&(P=(s=y.lang.System).getProperty("os.arch"),L=L||s.getProperty("os.name")+" "+s.getProperty("os.version")),_){try{k=n.require("ringo/engine").version.join("."),B="RingoJS"}catch(e){(s=n.system)&&s.global.system==n.system&&(B="Narwhal",L||(L=s[0].os||null))}B||(B="Rhino")}else"object"==typeof n.process&&!n.process.browser&&(s=n.process)&&("object"==typeof s.versions&&("string"==typeof s.versions.electron?(T.push("Node "+s.versions.node),B="Electron",k=s.versions.electron):"string"==typeof s.versions.nw&&(T.push("Chromium "+k,"Node "+s.versions.node),B="NW.js",k=s.versions.nw)),B||(B="Node.js",P=s.arch,L=s.platform,k=(k=/[\d.]+/.exec(s.version))?k[0]:null));else g(s=n.runtime)==u?(B="Adobe AIR",L=s.flash.system.Capabilities.os):g(s=n.phantom)==h?(B="PhantomJS",k=(s=s.version||null)&&s.major+"."+s.minor+"."+s.patch):"number"==typeof M.documentMode&&(s=/\bTrident\/(\d+)/i.exec(t))?(k=[k,M.documentMode],(s=+s[1]+4)!=k[1]&&(T.push("IE "+k[1]+" mode"),N&&(N[1]=""),k[1]=s),k="IE"==B?String(k[1].toFixed(1)):k[0]):"number"==typeof M.documentMode&&/^(?:Chrome|Firefox)\b/.test(B)&&(T.push("masking as "+B+" "+k),B="IE",k="11.0",N=["Trident"],L="Windows");L=L&&m(L)}if(k&&(s=/(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(k)||/(?:alpha|beta)(?: ?\d)?/i.exec(t+";"+(R&&i.appMinorVersion))||/\bMinefield\b/i.test(t)&&"a")&&(I=/b/i.test(s)?"beta":"alpha",k=k.replace(RegExp(s+"\\+?$"),"")+("beta"==I?v:w)+(/\d+\+?/.exec(s)||"")),"Fennec"==B||"Firefox"==B&&/\b(?:Android|Firefox OS)\b/.test(L))B="Firefox Mobile";else if("Maxthon"==B&&k)k=k.replace(/\.[\d.]+/,".x");else if(/\bXbox\b/i.test(F))"Xbox 360"==F&&(L=null),"Xbox 360"==F&&/\bIEMobile\b/.test(t)&&T.unshift("mobile mode");else if(!/^(?:Chrome|IE|Opera)$/.test(B)&&(!B||F||/Browser|Mobi/.test(B))||"Windows CE"!=L&&!/Mobi/i.test(t))if("IE"==B&&R)try{null===n.external&&T.unshift("platform preview")}catch(e){T.unshift("embedded")}else(/\bBlackBerry\b/.test(F)||/\bBB10\b/.test(t))&&(s=(RegExp(F.replace(/ +/g," *")+"/([.\\d]+)","i").exec(t)||0)[1]||k)?(L=((s=[s,/BB10/.test(t)])[1]?(F=null,W="BlackBerry"):"Device Software")+" "+s[0],k=null):this!=S&&"Wii"!=F&&(R&&C||/Opera/.test(B)&&/\b(?:MSIE|Firefox)\b/i.test(t)||"Firefox"==B&&/\bOS X (?:\d+\.){2,}/.test(L)||"IE"==B&&(L&&!/^Win/.test(L)&&k>5.5||/\bWindows XP\b/.test(L)&&k>8||8==k&&!/\bTrident\b/.test(t)))&&!d.test(s=e.call(S,t.replace(d,"")+";"))&&s.name&&(s="ing as "+s.name+((s=s.version)?" "+s:""),d.test(B)?(/\bIE\b/.test(s)&&"Mac OS"==L&&(L=null),s="identify"+s):(s="mask"+s,B=A?m(A.replace(/([a-z])([A-Z])/g,"$1 $2")):"Opera",/\bIE\b/.test(s)&&(L=null),R||(k=null)),N=["Presto"],T.push(s));else B+=" Mobile";(s=(/\bAppleWebKit\/([\d.]+\+?)/i.exec(t)||0)[1])&&(s=[parseFloat(s.replace(/\.(\d)$/,".0$1")),s],"Safari"==B&&"+"==s[1].slice(-1)?(B="WebKit Nightly",I="alpha",k=s[1].slice(0,-1)):k!=s[1]&&k!=(s[2]=(/\bSafari\/([\d.]+\+?)/i.exec(t)||0)[1])||(k=null),s[1]=(/\bChrome\/([\d.]+)/i.exec(t)||0)[1],537.36==s[0]&&537.36==s[2]&&parseFloat(s[1])>=28&&"WebKit"==N&&(N=["Blink"]),R&&(c||s[1])?(N&&(N[1]="like Chrome"),s=s[1]||((s=s[0])<530?1:s<532?2:s<532.05?3:s<533?4:s<534.03?5:s<534.07?6:s<534.1?7:s<534.13?8:s<534.16?9:s<534.24?10:s<534.3?11:s<535.01?12:s<535.02?"13+":s<535.07?15:s<535.11?16:s<535.19?17:s<536.05?18:s<536.1?19:s<537.01?20:s<537.11?"21+":s<537.13?23:s<537.18?24:s<537.24?25:s<537.36?26:"Blink"!=N?"27":"28")):(N&&(N[1]="like Safari"),s=(s=s[0])<400?1:s<500?2:s<526?3:s<533?4:s<534?"4+":s<535?5:s<537?6:s<538?7:s<601?8:"8"),N&&(N[1]+=" "+(s+="number"==typeof s?".x":/[.+]/.test(s)?"":"+")),"Safari"==B&&(!k||parseInt(k)>45)&&(k=s)),"Opera"==B&&(s=/\bzbov|zvav$/.exec(L))?(B+=" ",T.unshift("desktop mode"),"zvav"==s?(B+="Mini",k=null):B+="Mobile",L=L.replace(RegExp(" *"+s+"$"),"")):"Safari"==B&&/\bChrome\b/.exec(N&&N[1])&&(T.unshift("desktop mode"),B="Chrome Mobile",k=null,/\bOS X\b/.test(L)?(W="Apple",L="iOS 4.3+"):L=null),k&&0==k.indexOf(s=/[\d.]+$/.exec(L))&&t.indexOf("/"+s+"-")>-1&&(L=O(L.replace(s,""))),N&&!/\b(?:Avant|Nook)\b/.test(B)&&(/Browser|Lunascape|Maxthon/.test(B)||"Safari"!=B&&/^iOS/.test(L)&&/\bSafari\b/.test(N[1])||/^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|Web)/.test(B)&&N[1])&&(s=N[N.length-1])&&T.push(s),T.length&&(T=["("+T.join("; ")+")"]),W&&F&&F.indexOf(W)<0&&T.push("on "+W),F&&T.push((/^on /.test(T[T.length-1])?"":"on ")+F),L&&(s=/ ([\d.+]+)$/.exec(L),l=s&&"/"==L.charAt(L.length-s[0].length-1),L={architecture:32,family:s&&!l?L.replace(s[0],""):L,version:s?s[1]:null,toString:function(){var e=this.version;return this.family+(e&&!l?" "+e:"")+(64==this.architecture?" 64-bit":"")}}),(s=/\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(P))&&!/\bi686\b/i.test(P)?(L&&(L.architecture=64,L.family=L.family.replace(RegExp(" *"+s),"")),B&&(/\bWOW64\b/i.test(t)||R&&/\w(?:86|32)$/.test(i.cpuClass||i.platform)&&!/\bWin64; x64\b/i.test(t))&&T.unshift("32-bit")):L&&/^OS X/.test(L.family)&&"Chrome"==B&&parseFloat(k)>=39&&(L.architecture=64),t||(t=null);var $={};return $.description=t,$.layout=N&&N[0],$.manufacturer=W,$.name=B,$.prerelease=I,$.product=F,$.ua=t,$.version=B&&k,$.os=L||{architecture:null,family:null,version:null,toString:function(){return"null"}},$.parse=e,$.toString=function(){return this.description||""},$.version&&T.unshift(k),$.name&&T.unshift(B),L&&B&&(L!=String(L).split(" ")[0]||L!=B.split(" ")[0]&&!F)&&T.push(F?"("+L+")":"on "+L),T.length&&($.description=T.join(" ")),$}();a.platform=y,void 0===(i=function(){return y}.call(t,n,t,e))||(e.exports=i)}).call(this)}).call(this,n(1)(e),n(2))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){},function(e,t,n){e.exports=n.p+"images/logo-play.png"},function(e,t,n){e.exports=n.p+"images/logo-negative.png"},function(e,t,n){e.exports=n.p+"images/go-back-to-main-page.png"},function(e,t,n){e.exports=n.p+"images/logo-play-io_all_min-color_variation-v3.png"},function(e,t,n){"use strict";function o(e){let t=!1;window.addEventListener("scroll",n=>{t||window.requestAnimationFrame(()=>{e(),t=!1}),t=!0})}function i(){return void 0!==window.pageYOffset?window.pageYOffset:(document.documentElement||document.body.parentNode||document.body).scrollTop}var r;function a(e){let t=!0;for(const n of e)n.isActive&&t?(t=!1,n.classname="active"):n.classname="unactive"}n.r(t),function(e){e.CODE_AREA=".code-area",e.CONTENT="#d2v-content",e.CURRENT_SECTION_NAME="#current-section-name",e.TOP_HEADER="#d2v-header",e.NAVIGATION_MENU="#site-navigation"}(r||(r={}));class s{constructor(e,t){this._element=e,this._elementInMenu=this.getElementInMenu(t)}get isActive(){return this._element.getBoundingClientRect().top<=window.innerHeight/2}set classname(e){"active"===e?this._elementInMenuContainsActiveClass||this._elementInMenu.classList.add("active"):this._elementInMenuContainsActiveClass&&this._elementInMenu.classList.remove("active")}getElementInMenu(e){const t=document.querySelectorAll(`${r.NAVIGATION_MENU} > li > ul > li > a`);for(const e of t)if(e.getAttribute("href")==="#"+this._element.getAttribute("id"))return e}get _elementInMenuContainsActiveClass(){return void 0!==this._elementInMenu&&this._elementInMenu.classList.contains("active")}}class l{constructor(e){this._editors=[],this._editors=e,this._setListenerForEditorsAutoExecution()}runVisibleEditors(){for(const e of this._editors)e.isOnScreen&&e.hasNotBeenExecuted&&e.execute()}_setListenerForEditorsAutoExecution(){o(()=>{this.runVisibleEditors()})}}function c(e,t,n){const o=document.createElement(e);if("string"==typeof t)o.innerHTML=t;else if(t)for(const e of t)o.appendChild(e);return n&&(o.className=n),o}class u{constructor(e,t,n){this.TEXT_SHORTCUT={run:{macOs:"CTRL + R: run code",windows:"CTRL + F9: run code",linux:"CTRL + F9: run code"}},this.MORE_THAN_ONCE_CODE_CHANGED_CLASSNAME="more-than-once-code-changed",this.SHORTCUT_INFO_CLASSNAME="shortcut-info compiler-info",this._hasBeenExecuted=!1,this._eventFunctions={getInstance:e=>{this._KotlinPlaygroundEditorInstance=e},onChange:e=>{if(this.changedCounter++,2===this.changedCounter&&this.kotlinEditorContainer){let e;switch(this.PLATFORM_OS_USER_NAME){case"OS X":e=this.TEXT_SHORTCUT.run.macOs;break;case"Windows":e=this.TEXT_SHORTCUT.run.windows;break;case"Linux":e=this.TEXT_SHORTCUT.run.linux;break;default:e=""}"Other"!==this.PLATFORM_OS_USER_NAME&&this.kotlinEditorContainer.appendChild(c("div",[c("div",e),c("div","CTRL + SPACE: code completion")],this.SHORTCUT_INFO_CLASSNAME)),this.kotlinEditorContainer.classList.add(this.MORE_THAN_ONCE_CODE_CHANGED_CLASSNAME)}this._onChange&&this._onChange(e)}},this.changedCounter=0,this._selector=e,this.PLATFORM_OS_USER_NAME=t,this._onChange=n}init(){return new Promise(e=>{KotlinPlayground(this._selector,this._eventFunctions).then(()=>{if(this._KotlinPlaygroundEditorInstance){this._kotlinEditorContainer=this._KotlinPlaygroundEditorInstance.nodes[0];const e=this._kotlinEditorContainer.querySelector(r.CODE_AREA);if(null!==e&&e instanceof HTMLElement){this._codeArea=e;const t=e.querySelector(".CodeMirror"),n=u.getCookie("theme");n&&t.classList.add(`cm-s-${n}`)}}e(this)})})}static getCookie(e){const t=document.cookie.match(new RegExp("(^| )"+e+"=([^;]+)"));return t?t[2]:null}get kotlinEditorContainer(){return this._kotlinEditorContainer}get codeArea(){return this._codeArea}get bottom_of_codeArea_is_above_bottom_of_screen(){return!!this.codeArea&&this.codeArea.getBoundingClientRect().bottom>=0}get bottom_of_codeArea_is_below_top_of_screen(){return!!this.codeArea&&this.codeArea.getBoundingClientRect().bottom<=window.innerHeight}get hasNotBeenExecuted(){return!this._hasBeenExecuted}get isOnScreen(){if(this._KotlinPlaygroundEditorInstance)return this.bottom_of_codeArea_is_above_bottom_of_screen&&this.bottom_of_codeArea_is_below_top_of_screen}execute(){return new Promise((e,t)=>{this._KotlinPlaygroundEditorInstance&&(this._hasBeenExecuted=!0,this._KotlinPlaygroundEditorInstance.execute()),e(),t(new Error("can't execute kotlin playground editor"))})}get KotlinPlaygroundEditorInstance(){return this._KotlinPlaygroundEditorInstance}}var d=n(0),b=n.n(d);function p(){if(!b.a.os)return"Other";switch(b.a.os.family){case"Windows":return"Windows";case"OS X":return"OS X";case"Ubuntu":return"Linux";default:return"Other"}}void 0!==playground&&playground?function(){let e={name:"data2viz playground",code:'console.log("hello")'};const t=function(){const e=window.location.hash.match(/#\/S\/(.*)$/),t={hasScriptData:!1,scriptData:{code:"",name:""}};if(e&&e[1]){const n=JSON.parse(function(e){return RawDeflate.inflate(window.atob(e))}(e[1]));return n.hasOwnProperty("name")&&n.hasOwnProperty("code")?{hasScriptData:!0,scriptData:{code:n.code,name:n.name+" updated"}}:(console.error("script from url isn't type of IScriptData"),t)}return t}(),n=document.querySelector(".kotlin-code");if(n&&n instanceof HTMLElement){t.hasScriptData&&(e=t.scriptData,n.textContent=e.code);const o=t=>{!function(e,t){t.code=e,function(e){const t=`/S/${function(e){return window.btoa(RawDeflate.deflate(e))}(JSON.stringify(e))}`;history.pushState(null,"",`/playground/#${t}`)}(t)}(t,e)};new u(n,p(),o).init().then(e=>{e.execute(),window.onpopstate=(()=>{console.log("history navigation"),e.KotlinPlaygroundEditorInstance&&console.log(e.KotlinPlaygroundEditorInstance.codemirror)})})}}():(new Promise(e=>{const t=document.querySelectorAll(".kotlin-code"),n=[];let o=0;for(const e of t)e instanceof HTMLElement&&n.push(new u(e,p()));for(const t of n)t.init().then(()=>{++o===n.length&&e(new l(n))})}).then(e=>{e.runVisibleEditors()}),function(e,t){const n=document.body,r=void 0===t?0:t.getBoundingClientRect().height;o(()=>{const t=parseInt(window.getComputedStyle(e).paddingTop)-r;i()>=t&&!n.classList.contains("menu-fixed")?n.classList.add("menu-fixed"):i()<=t&&n.classList.contains("menu-fixed")&&n.classList.remove("menu-fixed")})}(document.querySelector(r.CONTENT),document.querySelector(r.TOP_HEADER)),function(){const e=document.querySelector(r.CURRENT_SECTION_NAME);e&&(e.innerHTML=function(){const e=document.querySelector("h1");return e?e.innerHTML:""}())}(),new Promise((e,t)=>{const n=[],o=document.querySelectorAll(`${r.CONTENT} h2`),i=document.querySelector(`${r.NAVIGATION_MENU}`);for(const e of o)n.push(new s(e,i));e(n.reverse()),t(new Error("can't get list of level two in navigation menu"))}).then(e=>{a(e),o(()=>{a(e)})}));n(3),n(4),n(5),n(6),n(7)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,